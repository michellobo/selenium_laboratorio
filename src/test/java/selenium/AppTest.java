package selenium;

import static org.junit.Assert.assertEquals;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.json.JSONObject;
import org.junit.After;
import org.junit.Before;
// Generated by Selenium IDE
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;

import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;

/**
 * Unit test for simple App.
 */
public class AppTest {
	private final static Logger LOGGER = Logger.getLogger("devops.subnivel.Control");
	private WebDriver driver;
    public double uf;
    public String pattern;
    public DecimalFormat myFormatter;

	@Before
	public void setUp() {
        pattern = "###,###,###";
        myFormatter = new DecimalFormat(pattern,DecimalFormatSymbols.getInstance(Locale.GERMANY));
		System.out.println("Iniciando configuraciÃ³n...");
        System.out.println(System.getProperty("os.name"));
        if(System.getProperty("os.name").contains("Mac")){
            System.setProperty("webdriver.chrome.driver", "drivers/chromedriver_mac64/chromedriver");
        } else {
            System.setProperty("webdriver.chrome.driver", "drivers/chromedriver");
        }
		SimpleDateFormat sdfDate = new SimpleDateFormat("dd-MM-yyyy");
		Date now = new Date();
		String strDate = sdfDate.format(now);
        driver = new ChromeDriver();
		// Call Mindicador API para UF Online
		String uri = "https://mindicador.cl/api/uf/" + strDate;
		JsonNode body;
		try {
			body = Unirest.get(uri).asJson().getBody();
			JSONObject json = body.getObject();
			uf = json.getJSONArray("serie").getJSONObject(0).getDouble("valor");
		} catch (UnirestException e) {
			LOGGER.log(Level.INFO, "error---- " + e + " ----");
		}
		//driver = new ChromeDriver();
	}

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void ahorroMenorUnMillon_y_sinImpuesto() {
        LOGGER.log(Level.INFO, "########################################> ahorroMenorUnMillon_y_sinImpuesto <########################################");
        this.test("900000", "800000", "800.000", "0", "0");
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void ahorroMenorUnMillon_y_primerTramoImpuesto() {
        LOGGER.log(Level.INFO, "########################################> ahorroMenorUnMillon_y_primerTramoImpuesto <########################################");
        double value = 950000 * 0.08;
        String output = myFormatter.format(value);
        this.test("1900000", "950000", "950.000", "0", output);
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void ahorroMenorUnMillon_y_segundoTramoImpuesto() {
        LOGGER.log(Level.INFO, "########################################> ahorroMenorUnMillon_y_segundoTramoImpuesto <########################################");
        double value = 950000 * 0.135;
        String output = myFormatter.format(value);
        this.test("2880000", "950000", "950.000", "0", output);
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void ahorroMenorUnMillon_y_tercerTramoImpuesto() {
        LOGGER.log(Level.INFO, "########################################> ahorroMenorUnMillon_y_tercerTramoImpuesto <########################################");
        double value = 950000 * 0.23;
        String output = myFormatter.format(value);
        this.test("4250000", "950000", "950.000", "0", output);
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void ahorroMenorUnMillon_y_cuartoTramoImpuesto() {
        LOGGER.log(Level.INFO, "########################################> ahorroMenorUnMillon_y_cuartoTramoImpuesto <########################################");
        double value = 950000 * 0.340;
        String output = myFormatter.format(value);
        this.test("5152300", "950000", "950.000", "0", output);
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void ahorroMenorUnMillon_y_quintoTramoImpuesto() {
        LOGGER.log(Level.INFO, "########################################> ahorroMenorUnMillon_y_quintoTramoImpuesto <########################################");
        double value = 950000 * 0.35;
        String output = myFormatter.format(value);
        this.test("7965100", "950000", "950.000", "0", output);
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void sinSueldo_y_35ufRetiro() {
        LOGGER.log(Level.INFO, "########################################> sinSueldo_y_35ufRetiro <########################################");
        double value = 35 * uf;
        String output1 = myFormatter.format(value);
        String output2 = myFormatter.format(1500000 - value);
        this.test("0", "1500000", output1, output2, "0");
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void sinSueldo_y_maxRetiro() {
        LOGGER.log(Level.INFO, "########################################> sinSueldo_y_35ufRetiro <########################################");
        double value = 150 * uf;
        String output1 = myFormatter.format(value);
        String output2 = myFormatter.format(59600300 - value);
        this.test("0", "59600300", output1, output2, "0");
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void retiroTotal_sueldoMenor17864280Anuales() {
        LOGGER.log(Level.INFO, "########################################> retiroTotal_sueldoMenor17864280Anuales <########################################");
        this.test("450350", "950600", "950.600", "0", "0");
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void retiroTotal_y_primerTramoImpuesto() {
        LOGGER.log(Level.INFO, "########################################> retiroTotal_y_primerTramoImpuesto <########################################");
        double value = 950600 * 0.08;
        String output = myFormatter.format(value);
        this.test("1900000", "950600", "950.600", "0", output);
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void retiroTotal_y_segundoTramoImpuesto() {
        LOGGER.log(Level.INFO, "########################################> retiroTotal_y_segundoTramoImpuesto <########################################");
        double value = 950600 * 0.135;
        String output = myFormatter.format(value);
        this.test("2880000", "950600", "950.600", "0", output);
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void retiroTotal_y_tercerramoImpuesto() {
        LOGGER.log(Level.INFO, "########################################> retiroTotal_y_tercerramoImpuesto <########################################");
        double value = 950600 * 0.23;
        String output = myFormatter.format(value);
        this.test("4250000", "950600", "950.600", "0", output);
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void retiroTotal_y_cuartoramoImpuesto() {
        LOGGER.log(Level.INFO, "########################################> retiroTotal_y_cuartoramoImpuesto <########################################");
        double value = 950600 * 0.340;
        String output = myFormatter.format(value);
        this.test("5152300", "950600", "950.600", "0", output);
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void retiroTotal_y_quintoramoImpuesto() {
        LOGGER.log(Level.INFO, "########################################> retiroTotal_y_quintoramoImpuesto <########################################");
        double value = 950600 * 0.35;
        String output = myFormatter.format(value);
        this.test("7965100", "950600", "950.600", "0", output);
    }

    @Test
    // test(inputSueldo, inputSaldo, retiroCorrecto, saldoRestantoCorrecto, impuestoCorrecto)
    public void retiroDxC_y_tercerTramoImpuesto() {
        LOGGER.log(Level.INFO, "########################################> retiroTotal_y_cuartoramoImpuesto <########################################");
        double value = 12000000 * 0.1;
        String output = myFormatter.format(value);
        double value1 = value * 0.23;
        String output1 = myFormatter.format(value1);
        double value2 = 12000000 - value;
        String output2 = myFormatter.format(value2);
        this.test("4250000", "12000000", output, output2, output1);
    }

	@After
	public void tearDown() {
		driver.close(); // Cierra el navegador actual abierto por el Script
		driver.quit(); // Cierra todas las sesiones abiertas por el Script
	}

	public void test(String inputSueldo, String inputSaldo, String retiroCorrecto, String saldoRestantoCorrecto,
			String impuestoCorrecto) {
		driver.get("http://localhost:3000/");
		driver.manage().window().maximize();
		driver.findElement(By.id("inputSueldo")).clear();
		driver.findElement(By.id("inputSueldo")).sendKeys(inputSueldo);
		driver.findElement(By.id("inputSaldo")).clear();
		driver.findElement(By.id("inputSaldo")).sendKeys(inputSaldo);
		driver.findElement(By.id("botonEnviar")).click();
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		// Resultados
		String retiro = driver.findElement(By.id("retiro")).getText();
		String saldo = driver.findElement(By.id("saldo")).getText();
		String impuesto = driver.findElement(By.id("impuesto")).getText();
		// Validaciones
		LOGGER.log(Level.INFO, "RETIRO ___ retiro: " + retiro + " retiroCorrecto: " + retiroCorrecto);
		LOGGER.log(Level.INFO, "SALDO ___ saldo: " + saldo + " saldoRestantoCorrecto: " + saldoRestantoCorrecto);
		LOGGER.log(Level.INFO, "IMPUESTO ___ impuesto: " + impuesto + " impuestoCorrecto: " + impuestoCorrecto);
		assertEquals(retiroCorrecto, retiro);
		assertEquals(saldoRestantoCorrecto, saldo);
		assertEquals(impuestoCorrecto, impuesto);
		driver.findElement(By.id("botonLimpiar")).click();
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        LOGGER.log(Level.INFO, "______________________________________ FIN ______________________________________");
	}
}